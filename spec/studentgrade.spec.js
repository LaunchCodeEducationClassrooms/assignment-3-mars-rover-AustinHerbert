let mod = require('./helpers/reporter.js');
const Rover = require('../rover.js');
const Message = require('../message.js');
const Command = require('../command.js');

let studentSpecs = mod.array;

// This file is for grading tests. Please do not edit this file for any reason.

describe("GRADING TEST: ", function() {

  it("Correct number of passing specs", function() {
    expect(studentSpecs.length).toEqual(13);
    for (let i = 0; i < studentSpecs.length; i++) {
      expect(studentSpecs[i].status).toEqual("passed");
      expect(studentSpecs[i].passedExpectations.length).toBeGreaterThanOrEqual(1);
    }
  });

// 1. line 36 response.name NOT message
// 2. response.commands NOT results lines 37-43
// 3. roverStatus not defined so can't read .chain
// 4. line 38 calling for moved position but uses command check // same for line 41

  it("Responds to TA message & commands", function() {
    let rover = new Rover(100);
    let commands = [
      new Command('MOVE', 4321),
      new Command('STATUS_CHECK'),
      new Command('MODE_CHANGE', 'LOW_POWER'),
      new Command('MOVE', 3579),
      new Command('STATUS_CHECK')
    ];
     let message = new Message('TA power', commands);
    let response = rover.receiveMessage(message);
    expect(response.name).toEqual('TA power');
    expect(response.commands[0].completed).toBeTrue;
    expect(response.commands[0].position).toEqual(4321);
    expect(response.commands[2].completed).toBeTrue;
    expect(response.commands[3].completed).toBeFalse;
    expect(response.commands[0].position).toEqual(4321);
    expect(response.commands[4].mode).toEqual('LOW_POWER');
    expect(response.commands[4].generatorWatts).toEqual(110);
  });



});
